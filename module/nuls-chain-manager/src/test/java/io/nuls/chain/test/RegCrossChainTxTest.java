/*
 * MIT License
 * Copyright (c) 2017-2019 nuls.io
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.nuls.chain.test;

import io.nuls.base.data.Transaction;
import io.nuls.chain.model.tx.txdata.TxChain;
import io.nuls.core.crypto.HexUtil;
import io.nuls.core.exception.NulsException;
import org.junit.Test;

/**
 * @author Niels
 */
public class RegCrossChainTxTest {

    @Test
    public void test() throws NulsException {
        String hex = "0b007821ca5d00fd1401057465737431013104585858585227000001030000000300255858586341376b6165514d506169524e507051534550385338744e584446654335766e4579255858586341376b61694b335968436453786658616166664875704244506a6d337665694545255858586341376b615959325172524658374c6539596477747a51394a7674525555333762784200c80063000100035858580358585800205fa012000000000000000000000000000000000000000000000000000000005847f80d00000000000000000000000000000000000000000000000000000000a0724e180900000000000000000000000000000000000000000000000000000800170200019a7c5f842094a73eb489d5678e446e3be57d689afd140101170200019a7c5f842094a73eb489d5678e446e3be57d689a02000100a03e66d94500000000000000000000000000000000000000000000000000000008d8a5882e038977e700031702000199092280b81a34b28901654601bbaa764ea0b385020001000040be40250000000000000000000000000000000000000000000000000000000000000000000000170200019a7c5f842094a73eb489d5678e446e3be57d689a0200010000205fa012000000000000000000000000000000000000000000000000000000ffffffffffffffff1702000129cfc6376255a78451eeb4b129ed8eacffa2feef02000100005847f80d00000000000000000000000000000000000000000000000000000000000000000000006b2102ff3511b8aabd6f598bda6b344a231a2bda8ffd236c13ef746342b0554a9839b7483046022100ecb92a5c6023cf398c62e964d9ef2428b4ec4a2c7ca8d5e75440430ce1696764022100e1f673547f9e0505c1d35b8ce74158f5e67cc483afc77461925dc9f0480bc3d3";
        Transaction transaction = new Transaction();
        transaction.parse(HexUtil.decode(hex),0);
        TxChain txChain = new TxChain();
        txChain.parse(transaction.getTxData(),0);
        System.out.println(txChain);

    }
}
